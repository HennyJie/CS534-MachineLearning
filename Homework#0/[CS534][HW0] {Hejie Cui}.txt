Homework #0 (All the Code are based on Python 3.6)

Problem 1 Find Out Data Patterns

Ideas of pattern analysis process:
1. Using the python package "pandas_profiling", get the basic statistic information between x1, x2 and y. 
2. Draw all the scattered points in Axes3D, we can see that those points seems distribute on a quadratic surface.
3. Assume the formula of quadratic surface is $y=a+b*x1+c*x2+d*x1x2+e*x1^{2}+f*x2^{2}$, using the least squares method, get the estimated surface function.
4. Calculate the correlation between this surface fitting model using the least squares method and y.

Conclusion:
1. x_1, x_2 and y obey normal distribution, see "Fig1.1_distribution.png".
2. Based on Pearson's, Spearman's, Kendall's and Phik Correlation, it seems that x2 is more related to y, see "Fig1.2_correlation.png".
3. Estimated Surface Function: $y = 0.1854904671658417 + 0.01137858305646018*x1 + 1.487252087875895*x2 + 1.0057886150598392*x1x2 - 0.007869678530675463*x1^{2} + 0.22083847372082588*x2^{2}$
4. The surface and scatter points in 3D coordinate are shown as "Fig1.3_data_pattern.png".
5. The correlation between this surface fitting model generated by the least squares method and y is: 0.998935824563

Code
```
import pandas as pd
from pandas import DataFrame
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import scipy.linalg
import scipy.optimize as optimize
from scipy.optimize import curve_fit
import numpy as np
from matplotlib import cm
import pandas_profiling

data = pd.read_csv("Homework#0/Problem1/hw0_p1.csv")

# generate a little basic for serious exploratory data analysis using pandas_profiling
profile = data.profile_report(title='Pandas Profiling Report')
profile.to_file(output_file="output.html")

data = np.array(data.values.tolist())
x1 = data[:,0]
x2 = data[:,1]
y = data[:,2]

# best-fit quadratic surface
A = np.c_[np.ones(data.shape[0]), data[:,:2], np.prod(data[:,:2], axis=1), data[:,:2]**2]
C, _, _, _ = scipy.linalg.lstsq(A, y)
print("Estimated Surface Function: y=({})+({}*x1)+({}*x2)+({}*x1x2)+({}*x1^2)+({}*x2^2)".format(C[0], C[1], C[2], C[3], C[4], C[5]))

# regular grid covering the domain of the data
X, Y = np.meshgrid(np.arange(x1.min(), x1.max(), 0.05), np.arange(x2.min(), x2.max(), 0.05))
XX = X.flatten()
YY = Y.flatten()
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX*YY, XX**2, YY**2], C).reshape(X.shape)

# draw surface
ax = plt.figure().gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x1, x2, y)
ax.set_xlabel('x1')
ax.set_ylabel('x2')
ax.set_zlabel('y')
plt.savefig("Homework#0/Problem1/data_pattern.png")

# calculate the correlation between estimated curve and original scatter points
pre_y = np.dot(np.c_[np.ones(data.shape[0]), x1, x2, x1*x2, x1**2, x2**2], C)
data = pd.read_csv("Homework#0/Problem1/hw0_p1.csv")
print("The correlation between the surface fitting model using the least squares method and y is: ", data['y'].corr(pd.Series(data=pre_y)))

```


Problem 2 Stock Analysis
1.See "Fig2.1_daily_closing_price.png"

2.
The mean of the Apple stock’s daily return is:  1.00074407268
The variance of the Apple stock’s daily return is:  0.000240514008769

3.
-----------------------------------------------------------------
Mean Daily returns for the Year 2014 is: 1.0015005423917502
Var Daily returns for the Year 2014 is: 0.00016935194006113577
-----------------------------------------------------------------
Mean Daily returns for the Year 2015 is: 0.999952841620269
Var Daily returns for the Year 2015 is: 0.00028248786162786443
-----------------------------------------------------------------
Mean Daily returns for the Year 2016 is: 1.0004875924554941
Var Daily returns for the Year 2016 is: 0.0002158670906973192
-----------------------------------------------------------------
Mean Daily returns for the Year 2017 is: 1.0015734100278486
Var Daily returns for the Year 2017 is: 0.00012348412792346125
-----------------------------------------------------------------
Mean Daily returns for the Year 2018 is: 0.9998834301752767
Var Daily returns for the Year 2018 is: 0.0003266214685168237
-----------------------------------------------------------------
Mean Daily returns for the Year 2019 is: 1.0020991332156899
Var Daily returns for the Year 2019 is: 0.0003183090900965828
-----------------------------------------------------------------

Code
```
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt

data = pd.read_csv("Homework#0/Problem2/AAPL.csv")
close_price = data['Close'].to_numpy()
dates = data['Date'].values

x = [dt.datetime.strptime(d,'%Y-%m-%d').date() for d in dates]
y = close_price

# set format and locator
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
locator = mdates.YearLocator()
plt.gca().xaxis.set_major_locator(locator)

# plot the daily closing prices over time
plt.plot(x,y)
plt.title('Daily Closing Price of AAPL')
plt.ylabel('daily closing prices')
plt.xlabel('date')
plt.gcf().autofmt_xdate()
plt.savefig("Homework#0/Problem2/daily_closing_price.png")

total_days_count = close_price.shape[0]
daily_return = np.ones(total_days_count-1)
for i in range(total_days_count - 1):
    daily_return[i] = close_price[i+1] / close_price[i]

# calculate the mean and variance of the Apple stock’s daily return
mean_daily_return = np.mean(daily_return)
variance_daily_return = np.var(daily_return)
print("The mean of the Apple stock’s daily return is: ", mean_daily_return)
print("The variance of the Apple stock’s daily return is: ", variance_daily_return)
print("-----------------------------------------------------------------")

# calculate the daily returns for the Year 2014, 2015, 2016, 2017, 2018, and 2019
daily_return_list = daily_return.tolist()
daily_return_list.insert(0, None)
data['Return'] = daily_return_list

year_group_dict = {}
for date, ratio in zip(x, daily_return_list):
    if ratio is None:
        continue
    if date.year not in year_group_dict:
        year_group_dict[date.year] = [ratio]
    else:
        year_group_dict[date.year] += [ratio]

for key in year_group_dict.keys():
    # print("Daily returns for the Year {} is: {}".format(key, year_group_dict[key]))
    print("Mean Daily returns for the Year {} is: {}".format(key, np.mean(year_group_dict[key])))
    print("Var Daily returns for the Year {} is: {}".format(key, np.var(year_group_dict[key])))
    print("-----------------------------------------------------------------")

```


Problem 3 Liquid Mixing
1.
After Cycle 1, Chocolate cup has 0.96 volume liquid
After Cycle 1, Orange cup has 1.04 volume liquid

2.
After Cycle 10, Chocolate cup has 0.909366641353724 volume liquid
After Cycle 10, Orange cup has 1.0906333586462766 volume liquid

3.
 number_of_cycle  volume_of_chocolate_cup  volume_of_orange_cup
             1.0                 0.960000              1.040000
             2.0                 0.937600              1.062400
             3.0                 0.925056              1.074944
             4.0                 0.918031              1.081969
             5.0                 0.914098              1.085902
             6.0                 0.911895              1.088105
             7.0                 0.910661              1.089339
             8.0                 0.909970              1.090030
             9.0                 0.909583              1.090417
            10.0                 0.909367              1.090633
            11.0                 0.909245              1.090755
            12.0                 0.909177              1.090823
            13.0                 0.909139              1.090861
            14.0                 0.909118              1.090882
            15.0                 0.909106              1.090894
            16.0                 0.909099              1.090901
            17.0                 0.909096              1.090904
            18.0                 0.909094              1.090906
            19.0                 0.909092              1.090908
            20.0                 0.909092              1.090908
            21.0                 0.909091              1.090909
            22.0                 0.909091              1.090909
            23.0                 0.909091              1.090909
            24.0                 0.909091              1.090909
            25.0                 0.909091              1.090909
            26.0                 0.909091              1.090909
            27.0                 0.909091              1.090909
            28.0                 0.909091              1.090909
            29.0                 0.909091              1.090909
            30.0                 0.909091              1.090909
            31.0                 0.909091              1.090909
            32.0                 0.909091              1.090909
            33.0                 0.909091              1.090909
            34.0                 0.909091              1.090909
            35.0                 0.909091              1.090909
            36.0                 0.909091              1.090909
            37.0                 0.909091              1.090909
            38.0                 0.909091              1.090909
            39.0                 0.909091              1.090909
            40.0                 0.909091              1.090909
            41.0                 0.909091              1.090909
            42.0                 0.909091              1.090909
            43.0                 0.909091              1.090909
            44.0                 0.909091              1.090909
            45.0                 0.909091              1.090909
            46.0                 0.909091              1.090909
            47.0                 0.909091              1.090909
            48.0                 0.909091              1.090909
            49.0                 0.909091              1.090909
            50.0                 0.909091              1.090909
            51.0                 0.909091              1.090909
            52.0                 0.909091              1.090909
            53.0                 0.909091              1.090909
            54.0                 0.909091              1.090909
            55.0                 0.909091              1.090909
            56.0                 0.909091              1.090909
            57.0                 0.909091              1.090909
            58.0                 0.909091              1.090909
            59.0                 0.909091              1.090909
            60.0                 0.909091              1.090909
            61.0                 0.909091              1.090909
            62.0                 0.909091              1.090909
            63.0                 0.909091              1.090909
            64.0                 0.909091              1.090909
            65.0                 0.909091              1.090909
            66.0                 0.909091              1.090909
            67.0                 0.909091              1.090909
            68.0                 0.909091              1.090909
            69.0                 0.909091              1.090909
            70.0                 0.909091              1.090909
            71.0                 0.909091              1.090909
            72.0                 0.909091              1.090909
            73.0                 0.909091              1.090909
            74.0                 0.909091              1.090909
            75.0                 0.909091              1.090909
            76.0                 0.909091              1.090909
            77.0                 0.909091              1.090909
            78.0                 0.909091              1.090909
            79.0                 0.909091              1.090909
            80.0                 0.909091              1.090909
            81.0                 0.909091              1.090909
            82.0                 0.909091              1.090909
            83.0                 0.909091              1.090909
            84.0                 0.909091              1.090909
            85.0                 0.909091              1.090909
            86.0                 0.909091              1.090909
            87.0                 0.909091              1.090909
            88.0                 0.909091              1.090909
            89.0                 0.909091              1.090909
            90.0                 0.909091              1.090909
            91.0                 0.909091              1.090909
            92.0                 0.909091              1.090909
            93.0                 0.909091              1.090909
            94.0                 0.909091              1.090909
            95.0                 0.909091              1.090909
            96.0                 0.909091              1.090909
            97.0                 0.909091              1.090909
            98.0                 0.909091              1.090909
            99.0                 0.909091              1.090909
           100.0                 0.909091              1.090909

Code
```
import numpy as np
import pandas as pd 

# matrix representation of one cycle
choco_to_orange = np.array([[0.7, 0], [0.3, 1]])
orange_to_choco = np.array([[1, 0.2], [0, 0.8]])
one_cycle = np.dot(orange_to_choco, choco_to_orange)

state = {}
state[0] = np.array([1, 1])
data_frame = pd.DataFrame(columns=['number_of_cycle', 'volume_of_chocolate_cup', 'volume_of_orange_cup'])

# simulate the liquid mixing process
for i in range(1, 101):
    state[i] = np.dot(one_cycle, state[i-1])
    if i==1 or i==10:
        print("After Cycle {}, Chocolate cup has {} volume liquid".format(i, state[i][0])) 
        print("After Cycle {}, Orange cup has {} volume liquid".format(i, state[i][1])) 
    data_frame.loc[i-1] = [i, state[i][0], state[i][1]]

print(data_frame.to_string(index=False))

```
